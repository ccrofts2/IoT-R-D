
#include <esp_now.h>
#include <WiFi.h>
#include <nvs_flash.h>
#include <mbedtls/md.h> // Include for HMAC


uint8_t pmk[16]; // To store the PMK
uint8_t broadcastAddress[] = {0x08, 0xB6, 0x1F, 0xB9, 0xF8, 0x80};  // Sender's MAC Address - Corrected!
esp_now_peer_info_t peerInfo;  // Now declared before it's used
uint8_t authKey[16]; // Authentication key (16 bytes)
uint32_t last_seq_num = 0;
bool firstPacketReceived = false;

typedef struct struct_message {
    char a[32];
    int b;
    float c;
    bool d;
    uint32_t seq_num; 
    uint8_t hmac[32]; 
} struct_message;

// Create a struct_message called myData
struct_message myData;


void OnDataRecv(const esp_now_recv_info_t * info, const uint8_t *incomingData, int len) {
    uint8_t authorizedMac[] = {0x08, 0xB6, 0x1F, 0xB9, 0xF8, 0x80}; // Authorized sender MAC
    
    if (memcmp(info->src_addr, authorizedMac, 6) != 0) {
    Serial.println("Unauthorized MAC address.  Discarding packet.");
    return; // Discard the packet
  }
  
  static bool firstPacketReceived = false;  // Make it static to preserve state
  static uint32_t last_seq_num = 0;
  
   if (len == sizeof(myData)) {
    memcpy(&myData, incomingData, sizeof(myData));

    if (!firstPacketReceived) {
        last_seq_num = myData.seq_num;
        firstPacketReceived = true;
        Serial.println("First packet received. Initialized sequence number.");

       // Process first packet:
        Serial.print("Bytes received: ");
        Serial.println(sizeof(myData));
        Serial.print("Char: ");
        Serial.println(myData.a);
        Serial.print("Int: ");
        Serial.println(myData.b);
        Serial.print("Float: ");
        Serial.printf("%.2f\n", myData.c);
        Serial.print("Bool: ");
        Serial.println(myData.d);
        Serial.print("Sequence Number: ");
        Serial.println(myData.seq_num);
        Serial.println();

    } else if (myData.seq_num < last_seq_num) {
        Serial.println("Duplicate or out-of-order packet. Discarding.");
        return;
    } else { // Regular packet processing
        last_seq_num = myData.seq_num;
        Serial.print("Received sequence number: ");
        Serial.println(myData.seq_num);

        // Process regular packet:
        Serial.print("Bytes received: ");
        Serial.println(sizeof(myData));
        Serial.print("Char: ");
        Serial.println(myData.a);
        Serial.print("Int: ");
        Serial.println(myData.b);
        Serial.print("Float: ");
        Serial.printf("%.2f\n", myData.c);
        Serial.print("Bool: ");
        Serial.println(myData.d);
        Serial.print("Sequence Number: ");
        Serial.println(myData.seq_num);
        Serial.println();
    } 
  } // End of data processing

        // HMAC Verification (perform only for in-sequence or first packets)
        uint8_t calculatedHmac[32];
        mbedtls_md_context_t ctx;
        mbedtls_md_init(&ctx);
        int ret = mbedtls_md_setup(&ctx, mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), 1);
        if (ret != 0) { Serial.printf("mbedtls_md_setup failed: -0x%04X\n", -ret); return; }

        ret = mbedtls_md_hmac_starts(&ctx, authKey, sizeof(authKey));  // Corrected: No more keyData, use authKey directly.
        if (ret != 0) { Serial.printf("mbedtls_md_hmac_starts failed: -0x%04X\n", -ret); return; }

        ret = mbedtls_md_hmac_update(&ctx, (const unsigned char *)&myData, sizeof(myData) - sizeof(myData.hmac));  // Include all of myData *except* hmac
        if (ret != 0) { Serial.printf("mbedtls_md_hmac_update failed: -0x%04X\n", -ret); return; }

        ret = mbedtls_md_hmac_finish(&ctx, calculatedHmac);
        if (ret != 0) { Serial.printf("mbedtls_md_hmac_finish failed: -0x%04X\n", -ret); return; }

        mbedtls_md_free(&ctx);

        if (memcmp(calculatedHmac, myData.hmac, sizeof(calculatedHmac)) == 0) {
            if (myData.seq_num >= last_seq_num) { // Only update for valid, non-duplicate packets
              last_seq_num = myData.seq_num;
            }
            Serial.printf("Char: %s, Int: %d, Float: %.2f, Bool: %d, Sequence: %u\n", myData.a, myData.b, myData.c, myData.d, myData.seq_num); 

        } else {
            Serial.println("HMAC verification failed. Message discarded.");
            return;
        }
}
 
void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);

  esp_err_t err = nvs_flash_init();
  if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {
    ESP_ERROR_CHECK(nvs_flash_erase());
    err = nvs_flash_init();
  }
  ESP_ERROR_CHECK(err);

  nvs_handle_t my_handle;
  err = nvs_open("my_keys", NVS_READWRITE, &my_handle);
  if (err != ESP_OK) {
    Serial.println("Error opening NVS namespace");
    return;
  }
  size_t authKey_len = sizeof(authKey);
  err = nvs_get_blob(my_handle, "authKey", authKey, &authKey_len);
  if (err != ESP_OK) {
    Serial.println("Error reading authKey from NVS");
    nvs_close(my_handle);
    return;
  }
  size_t pmk_len = sizeof(pmk);
  err = nvs_get_blob(my_handle, "pmk", pmk, &pmk_len);
  if (err != ESP_OK){
    Serial.println("Error reading pmk from NVS");
    return;
  }
  nvs_close(my_handle);
  esp_now_set_pmk(pmk);

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = true;
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {

}
